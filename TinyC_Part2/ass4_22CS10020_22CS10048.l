%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include "ass4_22CS10020_22CS10048.tab.h"  // Include the header generated by Bison
    
    #define INFINITY 1000  // Define INFINITY here

    extern int yylineno; 
    extern struct SymbolTableEntry {
        char tokenName[50];
        char lexeme[100];
        int lineNumber;
    } symbolTable[INFINITY];
    extern int symbolTableCount;

    void addToSymbolTable(const char* tokenName, const char* lexeme);
%}

%option noyywrap 
%option yylineno

%%

"int"|"enum"|"restrict"|"short"|"float"|"char"|"double"|"case"|"void"|"while"|"break"|"goto"|"typedef"|"long"|"auto"|"unsigned"|"static"|"extern"|"return"|"sizeof"|"const"|"volatile"|"continue"|"switch"|"default"|"register"|"inline"|"do"|"if"|"struct"|"union"|"else"|"_Bool"|"_Complex"|"_Imaginary" {
    addToSymbolTable("keyword", yytext);
    return KEYWORD;
}

[Ee][+-]?[0-9]+ { 
    addToSymbolTable("exponent-part", yytext); 
    return EXPONENT_PART; 
}

[a-zA-Z_][a-zA-Z0-9_]* {
    addToSymbolTable("identifier", yytext);
    yylval.sval = strdup(yytext);
    return IDENTIFIER; 
}
[a-zA-Z_][a-zA-Z0-9_]* {
    addToSymbolTable("identifier", yytext);
    yylval.sval = strdup(yytext);
    return IDENTIFIER; 
}
[a-z]*[A-Z]*[a-zA-Z]* {
    addToSymbolTable("identifier", yytext);
    yylval.sval = strdup(yytext);
    return IDENTIFIER; 
}
[+-] { 
    addToSymbolTable("sign", yytext); 
    return yytext[0]; 
}

[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?  { 
    addToSymbolTable("floating-constant", yytext); 
    yylval.fval = atof(yytext);
    return FLOAT_CONSTANT; 
}

[0-9]+  { 
    addToSymbolTable("integer-constant", yytext); 
    yylval.ival = atoi(yytext);
    return INTEGER_CONSTANT; 
}

\"[^\"]*\" {
    addToSymbolTable("string-literal", yytext);
    yylval.sval = strdup(yytext);
    return STRING_LITERAL; 
}

\'[^\']*\' {
    addToSymbolTable("character-constant", yytext);
    yylval.sval = strdup(yytext);
    return CHARACTER_CONSTANT; 
}

[+\-*/%=&|<>!^~?:,;.()\[\]{}#] {
    addToSymbolTable("punctuator", yytext);
    return yytext[0]; 
}

"//".* {
    addToSymbolTable("Single line comment", yytext);
}

"/*"([^*]|\*+[^*/])*\*+"/" {
    addToSymbolTable("Multi line comment", yytext);
}

[ \t\r\n]+ {
    // Whitespace is ignored
}

"\\\'"|"\\\""|"\?"|"\\"|"\a"|"\b"|"\f"|"\n"|"\r"|"\t"|"\v" {
    addToSymbolTable("Escape Sequence", yytext);
    return ESCAPE_SEQUENCE;
}

. {
    printf("Unrecognized character: %s\n", yytext);
}

%%

// These functions are now moved to the main C file